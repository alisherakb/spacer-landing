{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js","AppleButton.png","PlayMarket.png","components/Logo.png","Screenshot.png"],"names":["Screen","width","Dimensions","get","height","Header","react_default","a","createElement","View","style","styles","header","TouchableOpacity","Image","logo","source","require","onPress","Linking","openURL","title","contactButton","Text","contactText","Component","StyleSheet","create","backgroundColor","paddingHorizontal","paddingTop","flexDirection","justifyContent","borderWidth","borderColor","borderRadius","paddingVertical","color","fontWeight","App","state","isMobile","isLoaded","Animated","Value","handleIOSPress","handleAndroidPress","handleAnimation","sequence","timing","_this","toValue","duration","delay","isLoaded2","start","this","setState","animatedOpacity","opacity","interpolate","inputRange","outputRange","extrapolate","animatedTransform","translateX","SafeAreaView","container","ScrollView","overScrollMode","showsVerticalScrollIndicator","stickyHeaderIndices","Header_Header","slide1","descriptionContainer","minorHighlightText","majorHighlightText","minorText","marginTop","marginLeft","flex","position","right","alignSelf","transform","paddingBottom","slide2","fontSize","lineHeight","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c99a2b33.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  TouchableOpacity,\n  StyleSheet,\n  Image,\n  Dimensions,\n  Linking\n} from 'react-native';\n\nconst Screen = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height\n};\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <View style={styles.header}>\n        <TouchableOpacity>\n          <Image style={styles.logo} source={require('./Logo.png')} />\n        </TouchableOpacity>\n        <View />\n        <TouchableOpacity\n          onPress={() => Linking.openURL('mailto:alisher286@gmail.com')}\n          title=\"alisher286@gmail.com\"\n        >\n          <View style={styles.contactButton}>\n            <Text style={styles.contactText}>Contact Us</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    backgroundColor: '#6067F1',\n    width: Screen.width,\n    height: 64,\n    paddingHorizontal: Screen.width / 30,\n    paddingTop: 24,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  logo: {\n    width: 140,\n    height: 38\n  },\n  contactButton: {\n    borderWidth: 1,\n    borderColor: 'white',\n    borderRadius: 50,\n    paddingHorizontal: 26,\n    paddingVertical: 12\n  },\n  contactText: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\n","import React, { Component } from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Dimensions,\n  SafeAreaView,\n  TouchableOpacity,\n  ScrollView,\n  Image,\n  Animated,\n  Linking\n} from 'react-native';\nimport Header from './components/Header';\nconst Screen = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height\n};\n\nexport default class App extends Component {\n  state = {\n    isMobile: false,\n    isLoaded: new Animated.Value(0)\n  };\n\n  handleIOSPress = () => {\n    Linking.openURL('https://itunes.apple.com/us/app/spacerar/id1456434631');\n  };\n\n  handleAndroidPress = () => {\n    Linking.openURL(\n      'https://play.google.com/store/apps/details?id=com.spacerproduction'\n    );\n  };\n\n  handleAnimation = () => {\n    Animated.sequence([\n      Animated.timing(this.state.isLoaded, {\n        toValue: 1,\n        duration: 500,\n        delay: 500\n      }),\n      Animated.timing(this.state.isLoaded2, {\n        toValue: 1,\n        duration: 1000,\n        delay: 1000\n      })\n    ]).start();\n  };\n\n  componentDidMount() {\n    if (Screen.width <= 400) {\n      this.setState({ isMobile: true });\n      this.handleAnimation();\n    } else {\n      return null;\n    }\n  }\n  render() {\n    const { isMobile } = this.state;\n    const animatedOpacity = {\n      opacity: this.state.isLoaded.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      })\n    };\n    const animatedTransform = [\n      {\n        translateX: this.state.isLoaded.interpolate({\n          inputRange: [0, 1],\n          outputRange: [300, 0],\n          extrapolate: 'clamp'\n        })\n      }\n    ];\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <ScrollView\n          overScrollMode={false}\n          showsVerticalScrollIndicator={false}\n          stickyHeaderIndices={[0]}\n        >\n          <Header />\n          <View\n            style={[\n              styles.slide1,\n              { flexDirection: isMobile ? 'column' : 'row' }\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.descriptionContainer,\n                isMobile ? animatedOpacity : null\n              ]}\n            >\n              <Text style={styles.minorHighlightText}>\n                #1 First truly AR social network\n              </Text>\n              <Text style={styles.majorHighlightText}>\n                Create and augment AR messages all over you city.\n              </Text>\n              <Text style={styles.minorText}>\n                GPS, portals, newsfeed and more fun waiting for you to try!\n                üìçüòçüì±\n              </Text>\n              {isMobile ? null : (\n                <View\n                  style={{\n                    flexDirection: isMobile ? 'column' : 'row',\n                    marginTop: Screen.height / 20\n                  }}\n                >\n                  <TouchableOpacity>\n                    <Image\n                      source={require('./AppleButton.png')}\n                      style={{ width: 180, height: 64 }}\n                    />\n                  </TouchableOpacity>\n                  <TouchableOpacity>\n                    <Image\n                      source={require('./PlayMarket.png')}\n                      style={{\n                        width: 180,\n                        height: 64,\n                        marginLeft: isMobile ? 0 : 16,\n                        marginTop: isMobile ? 16 : 0\n                      }}\n                    />\n                  </TouchableOpacity>\n                </View>\n              )}\n            </Animated.View>\n            <Animated.View style={{ flex: 1 }}>\n              <Animated.View\n                style={{\n                  position: 'relative',\n                  right: isMobile ? 0 : -96,\n                  marginTop: isMobile ? 32 : 0,\n                  alignSelf: 'center',\n                  transform: isMobile ? animatedTransform : null\n                }}\n              >\n                <Image\n                  source={require('./Screenshot.png')}\n                  style={{\n                    width: isMobile ? 210 : 592,\n                    height: isMobile ? 217 : 583\n                  }}\n                />\n                {!isMobile ? null : (\n                  <View\n                    style={{\n                      flexDirection: isMobile ? 'column' : 'row',\n                      marginTop: Screen.height / 20\n                    }}\n                  >\n                    <TouchableOpacity onPress={this.handleIOSPress}>\n                      <Image\n                        source={require('./AppleButton.png')}\n                        style={{ width: 180, height: 64 }}\n                      />\n                    </TouchableOpacity>\n                    <TouchableOpacity onPress={this.handleAndroidPress}>\n                      <Image\n                        source={require('./PlayMarket.png')}\n                        style={{\n                          width: 180,\n                          height: 64,\n                          marginLeft: isMobile ? 0 : 16,\n                          marginTop: isMobile ? 16 : 0\n                        }}\n                      />\n                    </TouchableOpacity>\n                  </View>\n                )}\n              </Animated.View>\n            </Animated.View>\n          </View>\n          {/* <View style={styles.slide2}>\n            <Text>Hi</Text>\n          </View> */}\n        </ScrollView>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n\n  slide1: {\n    paddingHorizontal: Screen.width / 30,\n    paddingTop: Screen.width / 25,\n    width: Screen.width,\n    backgroundColor: '#6067F1',\n    paddingBottom: 40\n  },\n  slide2: {\n    height: Screen.height,\n    width: Screen.width,\n    backgroundColor: 'white'\n  },\n\n  minorHighlightText: {\n    color: 'white',\n    fontSize: 22\n  },\n  majorHighlightText: {\n    fontSize: 40,\n    color: 'white',\n    marginTop: 16,\n    lineHeight: 64,\n    fontWeight: 800\n  },\n  descriptionContainer: {\n    flex: 1,\n    marginTop: Screen.height / 7\n  },\n  minorText: {\n    color: '#C4CAE3',\n    fontSize: 18,\n    marginTop: 16\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/AppleButton.16256e83.png\";","module.exports = __webpack_public_path__ + \"static/media/PlayMarket.0f88d8dc.png\";","module.exports = __webpack_public_path__ + \"static/media/Logo.c759d69c.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot.c25a79ef.png\";"],"sourceRoot":""}